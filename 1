#define _CRT_SECURE_NO_WARRNINGS
#include<stdio.h>
#include<stdlib.h>

#define Mat1_Row1 3
#define Mat1_Col1 3
#define Mat2_Row2 3
#define Mat2_Col2 3

typedef struct three {
	int i;
	int j;
	int value;
}Three;

typedef struct node3 {
	Three data;
	struct node3 *next;
}Node3;

typedef struct node4 {
	int data;
	struct node4 *next;
}Node4;

/* Function declarations */
void Ex1();
void Ex2();
void Ex3();
void Ex4();
//Ex1 functions//
void InstructionsEx1();
unsigned int* powerArray(int);
void printArray(int*, int);
//Ex2 functions//
void InstructionsEx2();
int** Multiplying_Matrices(int Ma[Mat1_Row1][Mat1_Col1], int Mb[Mat2_Row2][Mat2_Col2]);
int** Creat_Dinamic_Mat(int, int);
void print_mat_A(int M[][Mat1_Col1], int, int);
void print_mat_B(int M[][Mat2_Col2], int, int);
//Ex3 functions//
void InstructionsEx3();
int** Creat_Fill_Dinamic_Mat(int, int);
int SumCord(int**, int, int, Three**, Node3**);
int Creat_List(Node3**, int **, int, int);
Node3* Creat_node(int, int, int);
void freeNode3List(struct Node3*);
//Ex4 functions//
void InstructionsEx4();
Node4* Fill();
void Print_List_Data(Node4*);
void Delete_Next_Node(Node4**);
Node4* Add_To_List(Node4*, int);
Node4* New_Odd_List(Node4**);
void freeList(Node4*);
//---------------------------------------//
void free_matrix(int**, int);
int** fill_mat(int**, int, int);
void print_mat(int**, int, int);
void print_list_data(Node3*);
void print_Array(Three*, int);
void Insert_Rows_Cols(int*, int*);

/**********************/

int main()
{
	int select = 0, i, all_Ex_in_loop = 0;
	printf("Run menu once or cyclically?\n(Once - enter 0, cyclically - enter other number) ");
	if (scanf("%d", &all_Ex_in_loop) == 1)
		do
		{
			for (i = 1; i <= 4; i++)
				printf("Ex%d--->%d\n", i, i);
			printf("EXIT-->0\n");
			do {
				select = 0;
				printf("please select 0-4 : ");
				scanf("%d", &select);
			} while ((select < 0) || (select > 4));
			switch (select)
			{
			case 1: Ex1(); break;
			case 2: Ex2(); break;
			case 3: Ex3(); break;
			case 4: Ex4(); break;
			}
		} while (all_Ex_in_loop && select);
		return 0;
}

/**********************/
void Ex1() {
	int size, i;
	int* arr;
	InstructionsEx1();
	printf("Enter the size of the array:");
	scanf("%d", &size);
	if (size == 0) {
		printf(" 1\n");
		return;
	}
	arr = powerArray(size);
	if (arr == NULL) {
		printf("not enough memory\n");
		return;
	}
	printf("The result of Ex1:\n");
	printArray(arr, size);
	printf("\n");
	free(arr);
}

/**********************/

void Ex2() {
	int i, j;
	int MatA[Mat1_Row1][Mat1_Col1];
	int MatB[Mat2_Row2][Mat2_Row2];
	int **MatA_B;
	InstructionsEx2();
	printf("Enter the first matrix element:\n");
	for (i = 0; i < Mat1_Row1; i++) {
		for (j = 0; j < Mat1_Col1; j++) {
			printf("MatA[%d][%d]=", i, j);
			scanf("%d", &MatA[i][j]);
		}
		printf("\n");
	}
	printf("Enter the second matrix element:\n");
	for (i = 0; i < Mat2_Row2; i++) {
		for (j = 0; j < Mat2_Col2; j++) {
			printf("MatB[%d][%d]=", i, j);
			scanf("%d", &MatB[i][j]);
		}
		printf("\n");
	}
	MatA_B = Multiplying_Matrices(MatA, MatB);
	printf("The matrix A:\n");
	print_mat_A(MatA, Mat1_Row1, Mat1_Col1);
	printf("The matrix B:\n");
	print_mat_B(MatB, Mat2_Row2, Mat2_Col2);
	printf("The result of matrix A multiplying matrix B is:\n");
	print_mat(MatA_B, Mat1_Row1, Mat2_Col2);
	free_matrix(MatA_B, Mat1_Row1);
	MatA_B = NULL;
}

/**********************/

void Ex3() {
	InstructionsEx3();
	Node3 *list;
	Three *arr_list;
	int **mat, size;
	int rows, cols;
	Insert_Rows_Cols(&rows, &cols);
	mat = Creat_Fill_Dinamic_Mat(rows, cols);
	size = SumCord(mat, rows, cols, &arr_list, &list);
	printf("The matrix is:\n");
	print_mat(mat, rows, cols);
	printf("The result of Ex3:\n\n");
	print_Array(arr_list, size);
	print_list_data(list);
	free(arr_list);
	freeNode3List(list);
	free_matrix(mat, rows);
	mat = NULL;
}

/************************/

void Ex4() {
	InstructionsEx4();
	Node4 *x = Fill();
	Node4 *Odd_List;
	Odd_List = New_Odd_List(&x);
	printf("\nThe even list:\n");
	Print_List_Data(x);
	printf("The odd list:\n");
	Print_List_Data(Odd_List);
	freeList(x);
	freeList(Odd_List);
}

/*-----------Instructions-----------*/
void InstructionsEx1() {
	printf("\nIntroduction for Ex1:\n");
	printf("The user insert size to array and the function will calculate 2 pow index(mod 32)\n\n");
}

void InstructionsEx2() {
	printf("\nIntroduction for Ex2:\n");
	printf("The function will multiplying matrix A and matrix B,\n");
	printf("put the results in dynamic matrix and print the res, the user must input the matrices details.\n");
	printf("exept the size of the matix that is 3x3,to change the size please change the #define in the top of the plan\n");
	printf("lets enter details to the matrices:\n\n");
}
void InstructionsEx3() {
	printf("\nIntroduction for Ex3:\n");
	printf("The function will check if there are members in a dynamic matrix equal to the sums of their coordinates,\n");
	printf("put the results in the list and array, return the results and the sum of the members that meet the conditions.\n");
	printf("But first, please enter details to creat dinamic matrix:\n\n");
}
void InstructionsEx4() {
	printf("\nIntroduction for Ex4:\n");
	printf("The function will remove the odd members from the list,\nbuild a new list consisting of the odd numbers of the original list.\n");
	printf("Return the new list and the original list without the odd numbers.\n");
	printf("First, lets creat a list :)\n\n");
}

/* -----------Functions-----------*/
unsigned int* powerArray(int n) {
	unsigned int* p = (unsigned int*)malloc(n * sizeof(unsigned int));
	if (p == NULL)
	{
		return NULL;
	}
	int i;
	for (i = 0; i < n; i++)
	{
		if (i % 32)
		{
			p[i] = p[i - 1] * 2;
		}
		else
		{
			p[i] = 1;
		}
	}
	return p;
}

void printArray(int* arr, int size) {
	int i;
	for (i = 0; i < size; i++)
	{
		printf(" %u ", arr[i]);
	}
	printf("\n");
}

int** Creat_Dinamic_Mat(int rows, int cols) {
	int i;
	int **mat;
	mat = (int**)calloc(rows, sizeof(int*));
	for (i = 0; i < rows; i++) {
		mat[i] = (int*)calloc(cols, sizeof(int));
	}
	return mat;
}

int** Multiplying_Matrices(int Ma[Mat1_Row1][Mat1_Col1], int Mb[Mat2_Row2][Mat2_Col2]) {
	int **Mat_Res;
	int i, j, k;
	if (Mat1_Col1 != Mat2_Row2) {
		printf("Error!\n");
		printf("Width of the first matrix must to be eqaul to the high of the second matrix\n");
		return NULL;
	}
	if (!(Mat_Res = Creat_Dinamic_Mat(Mat1_Row1, Mat2_Col2))) {
		printf("Error!\n");
		return NULL;
	}
	for (i = 0; i < Mat1_Row1; i++) {
		for (j = 0; j < Mat2_Col2; j++) {
			for (k = 0; k < Mat1_Col1; k++) {
				Mat_Res[i][j] += Ma[i][k] * Mb[k][j];
			}
		}
	}
	return Mat_Res;
}

void print_mat_A(int M[][Mat1_Col1], int rows, int cols) {
	int i, j;
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			printf("%5d", M[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

void print_mat_B(int M[][Mat2_Col2], int rows, int cols) {
	int i, j;
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			printf("%5d", M[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

void free_matrix(int **c, int n)
{
	int i;
	for (i = 0; i < n; i++)
		free(c[i]);
	free(c);
}

int SumCord(int **mat, int rows, int cols, Three **ArrPtr, Node3 **list) {
	int size, i;
	Node3 *run;
	size = Creat_List(list, mat, rows, cols);
	run = *list;
	*ArrPtr = (Three*)malloc(size * sizeof(Three));
	for (i = 0; i < size; i++) {
		(*ArrPtr)[i] = run->data;
		run = run->next;
	}
	return size;
}

int Creat_List(Node3 **list, int **mat, int rows, int cols) {
	int i, j, counter = 0;
	Node3 head, *run = &head;
	head.next = NULL;
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			if (mat[i][j] == i + j) {
				counter++;
				run->next = Creat_node(i, j, i + j);
				run = run->next;
			}
		}
	}
	*list = head.next;
	return counter;
}

Node3* Creat_node(int i, int j, int value) {
	Node3 *temp;
	temp = (Node3*)malloc(sizeof(Node3));
	temp->data.i = i;
	temp->data.j = j;
	temp->data.value = value;
	temp->next = NULL;
	return temp;
}

int** Creat_Fill_Dinamic_Mat(int rows, int cols) {
	int i;
	int **mat;
	mat = (int**)calloc(rows, sizeof(int*));
	for (i = 0; i < rows; i++) {
		mat[i] = (int*)calloc(cols, sizeof(int));
	}
	mat = fill_mat(mat, rows, cols);
	return mat;
}

int** fill_mat(int **mat, int rows, int cols) {
	int i, j;
	printf("Insert values to the matrix please\n");
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			printf("a[%d][%d]= ", i, j);
			scanf("%d", &mat[i][j]);
		}
		printf("\n");
	}
	return mat;
}

void print_mat(int **mat, int rows, int cols) {
	int i, j;
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			printf("%5d", mat[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

void print_list_data(Node3 *list) {
	printf("Output list data: (i, j, value)\n");
	while (list != NULL) {
		printf("(%d, %d, %d) -> ", list->data.i, list->data.j, list->data.value);
		list = list->next;
	}
	printf("NULL\n");
	printf("\n");
}

void print_Array(Three *a, int n) {
	int i;
	printf("The size of list and array is: %d\n", n);
	printf("\n");
	printf("Output array data: (i, j, value)\n");
	for (i = 0; i < n; i++)
		printf("(%d, %d, %d)\t", a[i].i, a[i].j, a[i].value);
	if (n == 0)
		printf("The array is emty");
	printf("\n\n");
}

void Insert_Rows_Cols(int *rows, int *cols) {
	printf("Enter the number of rows that you want please\n");
	scanf("%d", rows);
	while ((*rows) < 1) {
		printf("Invaild nuber\n");
		printf("Please enter a positive number\n");
		scanf("%d", rows);
	}
	printf("Enter the number of cols that you want please\n");
	scanf("%d", cols);
	while ((*cols) < 1) {
		printf("Invaild nuber\n");
		printf("Please enter a positive number\n");
		scanf("%d", cols);
	}
}

void freeNode3List(Node3* losiy) {
	Node3* ptr = losiy;
	Node3* next;
	while (ptr != NULL)
	{
		next = ptr->next;
		free(ptr);
		ptr = next;
	}
}

Node4* Fill() {
	Node4 head, *run = &head;
	head.next = NULL;
	int temp;
	printf("Enter posivite numbers please and nagative number to end\n");
	scanf("%d", &temp);
	while (temp > 0) {
		run->next = (Node4*)malloc(sizeof(Node4));
		run = run->next;
		run->data = temp;
		run->next = NULL;
		scanf("%d", &temp);
	}
	return head.next;
}

void Print_List_Data(Node4 *x) {
	while (x != NULL) {
		printf("%d->", x->data);
		x = x->next;
	}
	printf("NULL\n\n");
}

void Delete_Next_Node(Node4 **head) {
	Node4 *run;
	run = (*head);
	Node4 *temp;
	temp = run->next;
	run->next = run->next->next;
	free(temp);
	temp = NULL;
}

Node4* Add_To_List(Node4 *val, int x) {
	Node4 *run;
	run = val;
	run->next = (Node4*)malloc(sizeof(Node4));
	run = run->next;
	run->data = x;
	run->next = NULL;
	return run;
}

Node4* New_Odd_List(Node4 **list) {
	Node4 TempNode, newlist;
	Node4 *evenrun = &TempNode;
	Node4 *oddrun = &newlist;
	int temp;
	TempNode.data = 0;
	TempNode.next = *list;
	newlist.next = NULL;
	while (evenrun->next != NULL) {
		if (evenrun->next->data % 2) {
			temp = evenrun->next->data;
			Delete_Next_Node(&evenrun);
			oddrun = Add_To_List(oddrun, temp);
			oddrun->next = NULL;
		}
		else evenrun = evenrun->next;
	}
	*list = TempNode.next;
	return newlist.next;
}

void freeList(Node4* losiy) {
	Node4* ptr = losiy;
	Node4* next;
	while (ptr != NULL)
	{
		next = ptr->next;
		free(ptr);
		ptr = next;
	}
}